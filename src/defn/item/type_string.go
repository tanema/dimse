// Code generated by "stringer -type Type"; DO NOT EDIT.

package item

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ApplicationContext-16]
	_ = x[PresentationContextRequest-32]
	_ = x[PresentationContextResponse-33]
	_ = x[AbstractSyntax-48]
	_ = x[TransferSyntax-64]
	_ = x[UserInformation-80]
	_ = x[UserInformationMaximumLength-81]
	_ = x[ImplementationClassUID-82]
	_ = x[AsynchronousOperationsWindow-83]
	_ = x[RoleSelection-84]
	_ = x[ImplementationVersionName-85]
}

const (
	_Type_name_0 = "ApplicationContext"
	_Type_name_1 = "PresentationContextRequestPresentationContextResponse"
	_Type_name_2 = "AbstractSyntax"
	_Type_name_3 = "TransferSyntax"
	_Type_name_4 = "UserInformationUserInformationMaximumLengthImplementationClassUIDAsynchronousOperationsWindowRoleSelectionImplementationVersionName"
)

var (
	_Type_index_1 = [...]uint8{0, 26, 53}
	_Type_index_4 = [...]uint8{0, 15, 43, 65, 93, 106, 131}
)

func (i Type) String() string {
	switch {
	case i == 16:
		return _Type_name_0
	case 32 <= i && i <= 33:
		i -= 32
		return _Type_name_1[_Type_index_1[i]:_Type_index_1[i+1]]
	case i == 48:
		return _Type_name_2
	case i == 64:
		return _Type_name_3
	case 80 <= i && i <= 85:
		i -= 80
		return _Type_name_4[_Type_index_4[i]:_Type_index_4[i+1]]
	default:
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
